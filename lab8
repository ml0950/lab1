#Lab 8
import torch 
import torch.nn as nn 
import torch.optim as optim 
import torchvision.transforms as transforms 
import torchvision.datasets as datasets 
from torch.utils.data import DataLoader 
 
transform = transforms.Compose([ 
    transforms.ToTensor(),    
    transforms.Normalize((0.5,), (0.5,)) 
]) 
 
trainset = datasets.CIFAR10(root='./data', train=True, download=True, transform=transform) 
testset = datasets.CIFAR10(root='./data', train=False, download=True, transform=transform) 
 
train_loader = DataLoader(trainset, batch_size=64, shuffle=True) 
test_loader = DataLoader(testset, batch_size=64, shuffle=False) 
 
class CNN(nn.Module): 
    def __init__(self): 
        super(CNN, self).__init__() 
        self.conv1 = nn.Conv2d(3, 32, kernel_size=3, padding=1) 
        self.bn1 = nn.BatchNorm2d(32) 
        self.conv2 = nn.Conv2d(32, 64, kernel_size=3, padding=1) 
        self.bn2 = nn.BatchNorm2d(64) 
        self.pool = nn.MaxPool2d(2, 2) 
        self.dropout = nn.Dropout(0.25) 
 
        self._to_linear = None 
        self._compute_fc_input() 
 
        self.fc1 = nn.Linear(self._to_linear, 128) 
        self.bn3 = nn.BatchNorm1d(128) 
        self.fc2 = nn.Linear(128, 10) 
 
    def _compute_fc_input(self): 
        with torch.no_grad(): 
            x = torch.zeros(1, 3, 32, 32)  
            x = self.pool(torch.relu(self.bn1(self.conv1(x)))) 
            x = self.pool(torch.relu(self.bn2(self.conv2(x)))) 
            self._to_linear = x.view(1, -1).shape[1]  
    def forward(self, x): 
        x = self.pool(torch.relu(self.bn1(self.conv1(x)))) 
        x = self.pool(torch.relu(self.bn2(self.conv2(x)))) 
        x = self.dropout(x.view(x.shape[0], -1))  
        x = torch.relu(self.bn3(self.fc1(x))) 
        x = self.fc2(x) 
        return x 
 
device = torch.device("cuda" if torch.cuda.is_available() else "cpu") 
model = CNN().to(device) 
criterion = nn.CrossEntropyLoss() 
optimizer = optim.Adam(model.parameters(), lr=0.001) 
 
num_epochs = 10 
train_acc_list = [] 
test_acc_list = [] 
 
for epoch in range(num_epochs): 
    model.train() 
    correct = 0 
    total = 0 
 
    for images, labels in train_loader: 
        images, labels = images.to(device), labels.to(device) 
 
        optimizer.zero_grad() 
        outputs = model(images) 
        loss = criterion(outputs, labels) 
        loss.backward() 
        optimizer.step() 
 
        _, predicted = torch.max(outputs, 1) 
        total += labels.size(0) 
        correct += (predicted == labels).sum().item() 
 
    train_acc = 100 * correct / total 
    train_acc_list.append(train_acc)
    model.eval() 
    correct = 0 
    total = 0 
 
    with torch.no_grad(): 
        for images, labels in test_loader: 
            images, labels = images.to(device), labels.to(device) 
            outputs = model(images) 
            _, predicted = torch.max(outputs, 1) 
            total += labels.size(0) 
            correct += (predicted == labels).sum().item() 
 
    test_acc = 100 * correct / total 
    test_acc_list.append(test_acc) 
 
    print(f'Epoch [{epoch+1}/{num_epochs}], Loss: {loss.item():.4f}, Train Accuracy: {train_acc:.2f}%, Test Accuracy: {test_acc:.2f}%') 
 
print(f'Final Test Accuracy: {test_acc_list[-1]:.2f}%')
